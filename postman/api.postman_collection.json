{
	"info": {
		"_postman_id": "6dbf89c0-baf0-45ae-8bc4-680b2f37e4f1",
		"name": "api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29627169"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "show user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.environment.set(\"crsf\", pm.response.cookies.get(\"XSRF-TOKEN\"));",
									"console.log(pm.response.cookies.get(\"XSRF-TOKEN\"))",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, updated_at, role, and avatar_url\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('name');",
									"    pm.expect(responseData).to.have.property('updated_at');",
									"    pm.expect(responseData).to.have.property('role');",
									"    pm.expect(responseData).to.have.property('avatar_url');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept-Encoding",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}api/users/1",
							"host": [
								"{{base_url}}api"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "index user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test 1: Verify the response status code is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test 2: Verify the response body is an array",
									"pm.test(\"Response body is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"// Test 3: Verify the response body contains specific fields for each user",
									"pm.test(\"Response body contains specific fields for each user\", function () {",
									"    pm.response.json().forEach(function(user) {",
									"        pm.expect(user).to.have.property('id');",
									"        pm.expect(user).to.have.property('name');",
									"        pm.expect(user).to.have.property('updated_at');",
									"        pm.expect(user).to.have.property('role');",
									"        pm.expect(user).to.have.property('avatar_url');",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}api/users",
							"host": [
								"{{base_url}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "store user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Response body contains 'The email has already been taken.' message\", function () {",
									"    pm.expect(pm.response.json().message).to.include(\"The email has already been taken.\");",
									"});",
									"",
									"pm.test(\"Response body contains 'email' error with message 'The email has already been taken.'\", function () {",
									"    pm.expect(pm.response.json().errors.email).to.eql([\"The email has already been taken.\"]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "bob",
									"type": "text"
								},
								{
									"key": "email",
									"value": "bob.test@localhost.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "bobPassword",
									"type": "text"
								},
								{
									"key": "password_confirmation",
									"value": "bobPassword",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}api/users",
							"host": [
								"{{base_url}}api"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "name",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auction",
			"item": [
				{
					"name": "store",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "_OAuth2",
			"item": [
				{
					"name": "OAuth/Client",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "OAuth/Tokens",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.request.headers.add(\"X-CSRF-TOKEN: \"+pm.environment.get(\"crsf\"))",
					"pm.request.headers.add(\"Accept: application/json\")"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.environment.set(\"crsf\", pm.response.cookies.get(\"XSRF-TOKEN\"));"
				]
			}
		}
	]
}